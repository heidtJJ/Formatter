/*---------------------------------------------------------------------- 
 * formatter.c:
 *
 * compilation: 
 *	gcc -o formatter formatter.c
 * usage:
 *	./formatter <input-file> <output-file> <width>
 * 
 *-----------------------------------------------------------------------
 */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <assert.h>
#include <ctype.h>
#include "list.h"

void formatter( FILE *, FILE *, int );
char* insertLetter(char*, const char, int, const int);
inline void printRepeated(const char, const int, FILE*);
inline void printWord(char*, FILE*);
	
int main( int argc, char *argv[] )
{
	FILE *ifp, *ofp;
	clock_t begin_time, end_time;
	double time_used;


	if (argc < 4) {
	  fprintf(stderr,"Not enough arguments\n");
	  exit(1);
	}
	if (!(ifp = fopen(argv[1],"r"))) {
	  fprintf(stderr,"Cannot open file %s\n",argv[1]);
	  exit(1);
	}
	if (!(ofp = fopen(argv[2],"w"))) {
	  fprintf(stderr,"Cannot open file %s\n",argv[2]);
	  exit(1);
	}

	begin_time = clock();
	formatter( ifp, ofp, atoi(argv[3]));
	end_time = clock();
	time_used = (double)(end_time - begin_time)/CLOCKS_PER_SEC;
	fprintf( stderr, "Time usage = %17.13f\n", time_used );

  	fclose(ifp);
  	fclose(ofp);

	return 0;
}

//----------------------------------------------------------------------------------------------------

/*
	IDEA: Parse through infile capturing each word while adding those words to a linked list. When the
	length of the list (plus the length of the current word being taken from infile) is greater than the 
	specified width, print the words in the linked list to the outfile with calculated spacing.
*/

void formatter( FILE *infile, FILE *outfile, const int width ) {
	char c;// the next character to read from the file
	char* buffer = NULL;// the current word from infile
	int bufferSize = 0;// size of the current word
	int listSize = 0;// sum of the lengths of the words in linked list
	int numSpaces = 0;// number of spaces needed in linked list (i.e size)
	list_t *top = NULL, *cur = NULL; // pointers to top of linked list and current node
		
	
	while ((c = getc( infile )) != EOF) {// read each character from file 
		
		if(isspace(c)) {//check if the character is a space
			if(bufferSize != 0) {// if size of buffer is not 0, add word to linked list
				
				if(top == NULL){ // check if linked list is empty
					top = cur = make_list(buffer);
				}
				else {
					cur->next = make_list(buffer);
					cur = cur->next;
					++numSpaces;// for a space on left to separate each word
				}		

				listSize += bufferSize;
				bufferSize = 0;
				buffer = NULL;
			}
		}
		else {// add character to the current buffer
			assert(!(bufferSize+1 > width));// buffer size must stay less than the current word
			buffer = insertLetter(buffer, c, bufferSize, width); 
			++bufferSize;				
		}

		// check if the list size and buffer size is within width constraint
		if((listSize + numSpaces + bufferSize >= width) && listSize > 0) {
			assert(top != NULL);
			cur = top;
			if(numSpaces != 0) {	
				int spaceToFill = width - listSize;
				int evenSpace = spaceToFill / numSpaces;// put after each word
				int extraSpace = spaceToFill % numSpaces;// add 1 space after the first extraSpace words
				while(cur != NULL) {
					printWord(cur->buffer, outfile);
					
					// handle spacing
					printRepeated(' ', evenSpace, outfile);
					if(extraSpace != 0){
						putc(' ', outfile);
						--extraSpace;
					}
					cur = free_node(cur);// free_node returns the next node
				}
			}
			else {// there is one word in list that we need to print
				assert(cur->next == NULL);
				if(listSize == width) {
					printWord(cur->buffer, outfile);
				}
				else {
					printRepeated(' ', width - listSize, outfile);
					printWord(cur->buffer, outfile);
				}
			}

			putc('\n', outfile);
			listSize = numSpaces = 0;
			top = cur = NULL;		
		}
	}

	// write the rest of the buffer & list to file
	cur->next = make_list(buffer);
	while(top != NULL) {			
		printWord(top->buffer, outfile);
		putc(' ', outfile);
		top = free_node(top);// free_node returns the next node
	}
}


//----------------------------------------------------------------------------------------------------

void printWord(char* word, FILE *outfile ){
	if(word != NULL) { 
		int i;// "loop initial declarations" not allowed in this version of C
		for(i = 0; word[i]!='\0'; ++i) {
		 	putc(word[i], outfile);
		 }
	}
}

//----------------------------------------------------------------------------------------------------

void printRepeated(const char c, const int limit, FILE *outfile ){
	int i;// "loop initial declarations" not allowed in this version of C
	for(i = 0; i < limit; ++i){
		putc(c, outfile);
	}
}

//----------------------------------------------------------------------------------------------------

char* insertLetter(char* word, const char c, const int indexToInsert, const int width) {
	assert(width != 0 && indexToInsert < width);	
	
	if(word == NULL) {
		word = calloc(width+1, sizeof(char));
		word[0] = c;
		word[1] = '\0';
	}
	else {
		word[indexToInsert] = c;
		word[indexToInsert+1] = '\0';
	}
	
	return word;
}			
